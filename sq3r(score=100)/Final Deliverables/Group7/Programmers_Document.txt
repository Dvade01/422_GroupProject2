                                PDF Active-Reading Assistant (ARA)
                                    Programmer's Documentation
                                    CS 422 Spring 2024 Group 7
            Ryan Helms, William Qiu, Nikhar Ramlakhan, Abie Safdie, Caleb Sutherland


This documentation should assist the programmers in making additional modifications to the ARA.
It provides an overview of:

1. Installation Guide
2. Software Dependencies
3. Required Versions of Components
4. Source Code File Relationships
5. Purpose and Inner Workings
6. Source Code Line Analysis
7. Variable Purposes, Scope, and Lifetime

INSTALLATION GUIDE                                                                                                   1
------------------
To install the PDF Active-Reading Assistant (ARA), follow these steps:

- Download the ARA source code files.
- Ensure that Python is installed on your system.
- Python versions can be found here: https://www.python.org/downloads/
- Install the mysql-connector package using pip: pip install mysql-connector-python.
- Install the PyMuPDF package using pip: pip install PyMuPDF

Run the ara.py file to start the application through the terminal: python ara.py

SOFTWARE DEPENDENCIES                                                                                                2
---------------------
The ARA software relies on the following dependencies:

- Python: The core programming language used for development.
- MySQL Connector: Required for communication with the MySQL database.
- PyMuPDF: Required to view PDF files.

REQUIRED VERSIONS OF COMPONENTS                                                                                      3
--------------------------------
ARA does not have strict requirements for specific version of its components, however it is noted that the development
was done with the latest version available as of 29 April 2024 of its dependencies.

It is therefore recommended that the developer uses the following versions of these components:
- Python 3.12 or higher
- MySQL Connector 8.3 or higher
- PyMuPDF 1-24.2 or higher

SOURCE CODE FILE RELATIONSHIPS                                                                                       4
------------------------------
The ARA consists of the following source code files:

ara.py:
    - Main application file responsible for the user interface and interaction of the PDF files.

database.py:
    - Defines functions for database communication.
    - Defines queries that work within the ara.py file to send and receive data from the database server.

PURPOSE AND INNER WORKINGS                                                                                           5
--------------------------
ara.py:
    Purpose:
        - Provides the user interface for the ARA application.

    Inner Workings:
         - Handles user input
         - Displays PDF documents
         - Interacts with the database for user data storage and retrieval.

database.py:
    Purpose:
        - Defines functions for communicating with the MySQL database.

    Inner Workings:
        - Establishes a connection to the database
        - Performs CRUD operations for user data
        - Manages PDF file information.
        - Stores, sends, and receives notes made by user.

SOURCE CODE LINE ANALYSIS                                                                                            6
-------------------------
Each line of the source code serves a specific purpose, contributing to the overall functionality of the ARA application.

Detailed line-by-line analysis is available within the code comments for better understanding.

ara.py file
    PDFViewer Class:
    - Description:
        The main page for viewing PDFs, taking notes, and saving them to the database. It supports self-quizzing and SQ3R reading method.
    - Methods:
        - __init__(self, root, path, user, user_id, file_id, file_name): Initializes the PDF viewer window.
        - open_pdf(self, file_path): Checks if the file path is legitimate to open the PDF.
        - load_pdf(self, file_path): Loads and displays the PDF file.
        - on_canvas_resize(self, event): Event handler for canvas resize. Reloads the PDF when the canvas is resized.
        - on_mouse_wheel(self, event): Event handler for mouse wheel scroll. Scrolls the canvas when the mouse wheel is scrolled.
        - toggle_fullscreen(self, event=None): Toggles fullscreen mode. Reloads the PDF when entered full screen.
        - exit_fullscreen(self, event=None): Toggles fullscreen mode. Reloads the PDF when entered full screen.
        - load_menu_bar(self): Instantiates and places all labels and buttons on the user interface for user interaction.
        - show_instructions(self): Shows SQ3R instructions.
        - hide_instructions(self): Hides SQ3R instructions.
        - load_notetaking_area(self): Loads the notetaking region and scans the database for pre-existing notes and loads them in if found.
        - save_notes(self): Saves notes to the database.
        - back_to_menu(self): Back to main menu homepage.
        - hide_notes(self): Hide the user notes.
        - show_notes(self): Show the user notes.
        - destroy_current_frame(self): Removes all widgets in the frame to prepare for loading of new widgets.
        - auto_indent(self, event): Uses regular expressions to auto-indent the next line to ensure hierarchy of notes.

    Login Class:
    - Description: Main page for getting the user to login with their intended user. Allows an admin setup to create a connection to the database that holds all the users and their information.
    - Methods:
        - __init__(self, root): Initializes the login window.
        - load_login(self): Loads the users, labels, admin, and other 'welcome to' information needed for user to load app.
        - add_user(self): Loads the window to type in username to add.
        - get_new_user(self, user, user_win): Adds the new users to the database.
        - on_select(self, user): Called when user clicks on the user they want to sign in as. Builds their pdf table and changes to the homepage.
        - admin_config_window(self): Loads admin config window to set up database.
        - destroy_current_frame(self): Removes all widgets on the screen to prepare space for new widgets.
        - db_config_window(self): Load window to input information to connect to a database.
        - apply_db_config(self, entries): Instantiates our new database with the user entries.

    HomePage Class:
    - Description: Main page for viewing all the PDFs that can be loaded and viewed.
    - Methods:
        - __init__(self, root, user_id=None, username=None): Initializes the main homepage window.
        - menu(self): Creates the labels and buttons needed for menu navigation.
        - example_with_notes(self): Creates the example PDF with the pre-loaded notes button to load that PDF.
        - example_pdf_shelf(self): Creates the example PDF buttons to load those PDFs.
        - user_pdfs(self): Creates the user PDF buttons to load those PDFs.
        - log_out(self): Logs the user out and returns to the login page.
        - destroy_current_frame(self): Removes all widgets in the frame to make space for new ones to be loaded.
        - loadPDF(self, file_path): Calls the PDFViewer class to load the window to display the PDF that we wished to load.

database.py file
    Database Class:
    - Description: Main class for defining a database. Holds values defining what database it is and creates the connection to the MySQL database.
    - Methods:
        - __init__(self, db_info): Initializes the connection and required info of the database.
        - config_db(self): Changes the required info to load the database into a readable format for the server.
        - connect_to_database(self): Attempts to connect to the database.
        - add_user(self, username): Adds a user to the database.
        - print_users(self): Gets all the users from the database.
        - get_user_id(self, username): Gets the ID of the user.
        - build_pdf_table(self): Builds the table that will hold the PDF IDs in the database.
        - get_file_id(self, file_name): Gets the ID of the PDF that you wish to access.
        - delete_files(self): Deletes all the file IDs and names.
        - check_note_existence(self, user_id, file_id): Checks to see if the user has a note associated with a specific file.
        - add_note(self, user_id, file_id): Adds a note to the database with a specific user ID and file ID.
        - modify_note(self, user_id, file_id, new_note): Modifies a note in the database with a specific user ID and file ID.
        - display_note(self, user_id, file_id): Displays a note in the app with a specific user ID and file ID.
        - delete_note(self, user_id, file_id): Deletes a note from the database with a specific user ID and file ID.

VARIABLE PURPOSE, SCOPE AND LIFETIME                                                                                 7
------------------------------------
Variables in the ARA serve various purposes and have different scopes and lifetimes based on their usage:

Variables Evaluation in ARA.py
    Global Variables:
    1. wd
       - Purpose: Stores the directory path of the ARA.py file for file navigation purposes.
       - Scope: Global, accessible throughout the ARA.py module.
       - Lifetime: Exists for the entire runtime of the program.

    2. db_global
       - Purpose: Stores the database connection object.
       - Scope: Global, accessible throughout the ARA.py module.
       - Lifetime: Exists for the entire runtime of the program.

    Variables within the PDFViewer Class:
    1. self.root, self.user, self.user_id, self.file_id, self.file_name, self.is_example
       - Purpose: Store information related to the PDF viewer window and loaded PDF.
       - Scope: Instance (belonging to each instance of the PDFViewer class).
       - Lifetime: Exist as long as the instance of the PDFViewer class exists.

    2. self.canvas, self.scrollbar, self.image_refs, self.current_file, self.scrollregion, self.notes, self.sQ3R_label, self.q3r_info, self.sq3r_showing
       - Purpose: Store GUI elements and related information for displaying PDFs and notes.
       - Scope: Instance (belonging to each instance of the PDFViewer class).
       - Lifetime: Exist as long as the instance of the PDFViewer class exists.

    Variables within the Login Class:
    1. self.root
       - Purpose: Stores the root window of the Tkinter GUI.
       - Scope: Instance (belonging to each instance of the Login class).
       - Lifetime: Exist as long as the instance of the Login class exists.

    2. entries
       - Purpose: Stores user entries for database configuration.
       - Scope: Local to the db_config_window() method.
       - Lifetime: Exist within the method execution and are destroyed once the method completes.

    Variables within the HomePage Class:
    1. self.root, self.user_id, self.username, self.canvas
       - Purpose: Store information related to the homepage window and logged-in user.
       - Scope: Instance (belonging to each instance of the HomePage class).
       - Lifetime: Exist as long as the instance of the HomePage class exists.

    2. self.pdfs_frame, self.pdfs
       - Purpose: Store GUI elements for displaying PDF buttons.
       - Scope: Instance (belonging to each instance of the HomePage class).
       - Lifetime: Exist as long as the instance of the HomePage class exists.

    3. file_path, file_name, file_id
       - Purpose: Store information related to the PDF file being loaded.
       - Scope: Local to the loadPDF() method.
       - Lifetime: Exist within the method execution and are destroyed once the method completes.

    Variables within the main() Function:
    1. root, login
       - Purpose: Store the root window of the Tkinter GUI and the login page instance.
       - Scope: Local to the main() function.
       - Lifetime: Exist within the function execution and are destroyed once the function completes.


Variables Evaluation in database.py
    Global Variables:
    1. db_default_config
       - Purpose: Stores the default configuration for the database.
       - Scope: Global, accessible throughout the database.py module.
       - Lifetime: Exists for the entire runtime of the program.

    Variables within the Database Class:
    1. self.host, self.port, self.user, self.password, self.database
       - Purpose: Store the host, port, username, password, and database name used to establish a connection.
       - Scope: Instance (belonging to each instance of the Database class).
       - Lifetime: Exists as long as the instance of the Database class exists.

    2. self.connection
       - Purpose: Stores the connection object to the MySQL database.
       - Scope: Instance (belonging to each instance of the Database class).
       - Lifetime: Exists as long as the instance of the Database class exists.

    Variables within Methods:
    1. config
       - Purpose: Stores configuration information for connecting to the database.
       - Scope: Local to the config_db() method.
       - Lifetime: Exists within the method execution and is destroyed once the method completes.

    2. insert_data, cursor, insert_query
       - Purpose: Used for executing SQL queries to add users or notes to the database.
       - Scope: Local to methods where they are defined (add_user(), build_pdf_table(), etc.).
       - Lifetime: Exist within the method execution and are destroyed once the method completes.

    3. names, list, result
       - Purpose: Store data retrieved from the database.
       - Scope: Local to methods where they are defined (print_users(), build_pdf_table(), etc.).
       - Lifetime: Exist within the method execution and are destroyed once the method completes.

    4. directory, wd, examples_directory, pdf_names, file_data, filename, f
       - Purpose: Used for file navigation and manipulation.
       - Scope: Local to the build_pdf_table() method.
       - Lifetime: Exist within the method execution and are destroyed once the method completes.

    5. select_data, select_query, update_query, update_data, delete_query, delete_data, note_data, final_id, final_user_id, note_exists
       - Purpose: Store data or queries for interacting with the database.
       - Scope: Local to methods where they are defined (get_user_id(), modify_note(), etc.).
       - Lifetime: Exist within the method execution and are destroyed once the method completes.

    6. err
       - Purpose: Stores error messages generated during database operations.
       - Scope: Local to except blocks where errors are caught.
       - Lifetime: Exist within the except block execution and are destroyed once the block completes.

    7. wd, directory, examples_directory
       - Purpose: Store directory paths for file navigation.
       - Scope: Local to the build_pdf_table() method.
       - Lifetime: Exist within the method execution and are destroyed once the method completes.
